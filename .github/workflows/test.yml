name: Test nsis-install-plugin

on:
  push:
    branches:
      - main
      - 'feature/**'
      - 'bugfix/**'

  workflow_dispatch:

jobs:

  basic-tests:
    name: Basic Tests
    permissions:
      contents: read    # GITHUB_TOKEN permission to read repository contents
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest, ubuntu-latest, macos-latest]

    runs-on: ${{matrix.os}}

    steps:
      - name: Install NSIS (ubuntu)
        if: runner.os == 'Linux'
        run: |
          # "man-db" slows down the installation of "nsis" a lot
          sudo apt remove -y man-db
          sudo apt install -y nsis
          dpkg -L nsis

      - name: Install NSIS (macOS)
        if: runner.os == 'macOS'
        run: |
          brew install -v makensis

      - name: Install NSIS-x86 (windows)
        if: runner.os == 'Windows'
        uses: negrutiu/nsis-install@v1
        with:
          arch: x86

      - name: Install NSIS-amd64 (windows)
        if: runner.os == 'Windows'
        uses: negrutiu/nsis-install@v1
        with:
          arch: amd64

      - name: Debug
        shell: python
        run: |
          import glob, os, sys
          print(f'OS: {os.name}, platform: {sys.platform}, version: {sys.version}', flush=True)
          print('--------------------------------------------------------------------------------', flush=True)
          os.system('set' if os.name == 'nt' else 'printenv')
          print('--------------------------------------------------------------------------------', flush=True)
          print(f'>> {os.getenv("RUNNER_TOOL_CACHE")}', flush=True)
          for file in glob.glob(os.path.join(os.getenv('RUNNER_TOOL_CACHE'), '*'), recursive=False):
              print(f'-- {file}', flush=True)
          print('--------------------------------------------------------------------------------', flush=True)
          print('>> 7-zip', flush=True)
          os.system('7z i')
          print('--------------------------------------------------------------------------------', flush=True)
          print('>> makensis', flush=True)
          os.system('makensis -VERSION')
          if sys.platform == 'darwin':
            print('--------------------------------------------------------------------------------', flush=True)
            nsis_root = os.path.dirname(os.path.dirname(os.path.realpath("/opt/homebrew/bin/makensis")))
            for file in glob.glob(os.path.join(nsis_root, '**'), recursive=True):
              if os.path.isfile(file):
                print(f'-- {file}', flush=True)
            print('--------------------------------------------------------------------------------', flush=True)
            for file in glob.glob('/opt/homebrew/Cellar/*', recursive=False):
              if os.path.isdir(file):
                print(f'-- {file}/', flush=True)
          if sys.platform == 'linux':
            print('--------------------------------------------------------------------------------', flush=True)
            for file in glob.glob('/usr/share/nsis/**', recursive=True):
              if os.path.isfile(file):
                print(f'-- {file}', flush=True)
            print('--------------------------------------------------------------------------------', flush=True)
            os.system('ls -laR /usr/share/nsis')
          print('--------------------------------------------------------------------------------', flush=True)

      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Install `NScurl` from GitHub
        uses: ./    # use ./action.yml
        with:
          github-owner: negrutiu
          github-repo: nsis-nscurl
          github-tag: latest
          github-asset-regex: NScurl\.zip
          github-token: ${{secrets.GITHUB_TOKEN}}   # use github-actions token to avoid rate limiting

      - name: Install `NsArray` from web
        uses: ./    # use ./action.yml
        with:
          url: https://nsis.sourceforge.io/mediawiki/images/9/97/NsArray.zip

      - name: List NSIS files
        shell: python
        run: |
          import glob, os, sys
          sys.path.insert(0, r'${{github.workspace}}')
          import action

          nsis_installations_list = action.nsis_list()
          assert len(nsis_installations_list) > 0, 'No NSIS installations found!'

          for makensis, instdir in nsis_installations_list:
            arch = action.pe_architecture(makensis) if os.name == 'nt' else 'amd64'
            version = action.nsis_version(makensis)
            targets = action.nsis_supported_targets(instdir)
            print(f'Found nsis/{version}-{arch}/{targets} in "{makensis}", "{instdir}"', flush=True)

          for makensis, instdir in nsis_installations_list:
            print('--------------------------------------------------------------------------------', flush=True)
            for file in glob.glob(os.path.join(instdir, '**'), recursive=True):
              if os.path.isfile(file):
                print(action.format_path(file, quotechar=''), flush=True)

      - name: Build test installer
        working-directory: .github/workflows
        shell: python
        run: |
          import glob, os, subprocess, sys
          sys.path.insert(0, r'${{github.workspace}}')
          import action

          index = 0
          for makensis, instdir in action.nsis_list():
            index += 1
            for target in action.nsis_supported_targets(instdir):
              args = [makensis, '-V3', f'-DTARGET={target}', f'-DFILEPREFIX=nsis{index}_', rf'-DFILESUFFIX=_${{matrix.os}}', 'Test.nsi']
              print(f'Run {args}', flush=True)
              subprocess.check_call(args)
              print('--------------------------------------------------------------------------------', flush=True)

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: nsis-install-plugin_${{matrix.os}}
          path: .github/workflows/*.exe

  # --------------------------------------------------------------------------------

  advanced-tests:
    name: Advanced Tests
    permissions:
      contents: read    # GITHUB_TOKEN permission to read repository contents
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest, ubuntu-latest, macos-latest]

    runs-on: ${{matrix.os}}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      # on macOS, the pre-installed p7zip is too old to extract from NSIS LZMA executables
      - name: Update 7-zip (macos)
        if: runner.os == 'macOS'
        run: |
          brew update
          brew install sevenzip
          7zz i

      - name: Install NSIS plugins (overwrite newer)
        env:
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}   # required by action.py to download GitHub assets
        shell: python
        run: |
          import glob, os, sys
          sys.path.insert(0, os.path.join(r'${{github.workspace}}', '.github', 'workflows'))
          import test   # .github/workflows/test.py

          print('Preparing temporary NSIS installations...')
          test.test_nsis_list()

          copied = 0
          copied += test.test_github_plugins(overwrite_newer=True, expect_zero_copies=False)
          copied += test.test_web_plugins(overwrite_newer=True, expect_zero_copies=False)

          test.print_line('=')
          print(f'Copied {copied} files')
          test.print_line('=')
          assert copied > 0, 'No files were copied in the first round, something is wrong!'

      - name: Install NSIS plugins (no overwrite)
        env:
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}   # required by action.py to download GitHub assets
        shell: python
        run: |
          import glob, os, sys
          sys.path.insert(0, os.path.join(r'${{github.workspace}}', '.github', 'workflows'))
          import test

          copied = 0
          copied += test.test_github_plugins(overwrite_newer=False, expect_zero_copies=True)
          copied += test.test_web_plugins(overwrite_newer=False, expect_zero_copies=True)

          test.print_line('=')
          print(f'Copied {copied} files')
          test.print_line('=')
          assert copied == 0, f'{copied} files were copied in the second round, something is wrong!'
