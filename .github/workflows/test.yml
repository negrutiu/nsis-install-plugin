name: Test nsis-install-plugin

on:
  push:
    branches:
      - main
      - 'feature/**'
      - 'bugfix/**'

  workflow_dispatch:

jobs:

  basic-tests:
    name: Basic Tests
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest, ubuntu-latest, macos-latest]

    runs-on: ${{matrix.os}}

    steps:
      - name: Install NSIS (ubuntu)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get install -y nsis
          dpkg -L nsis

      - name: Install NSIS (macOS)
        if: runner.os == 'macOS'
        run: |
          brew install -v makensis

      - name: Debug
        shell: python
        run: |
          import glob, os, sys
          print(f'OS: {os.name}, platform: {sys.platform}, version: {sys.version}', flush=True)
          print('--------------------------------------------------------------------------------', flush=True)
          os.system('set' if os.name == 'nt' else 'printenv')
          print('--------------------------------------------------------------------------------', flush=True)
          print(f'>> {os.getenv("RUNNER_TOOL_CACHE")}', flush=True)
          for file in glob.glob(os.path.join(os.getenv('RUNNER_TOOL_CACHE'), '*'), recursive=False):
              print(f'-- {file}', flush=True)
          print('--------------------------------------------------------------------------------', flush=True)
          print('>> 7-zip', flush=True)
          os.system('7z i')
          print('--------------------------------------------------------------------------------', flush=True)
          print('>> makensis', flush=True)
          os.system('makensis -VERSION')
          if sys.platform == 'darwin':
            print('--------------------------------------------------------------------------------', flush=True)
            nsis_root = os.path.dirname(os.path.dirname(os.path.realpath("/opt/homebrew/bin/makensis")))
            for file in glob.glob(os.path.join(nsis_root, '**'), recursive=True):
              if os.path.isfile(file):
                print(f'-- {file}', flush=True)
            print('--------------------------------------------------------------------------------', flush=True)
            for file in glob.glob('/opt/homebrew/Cellar/*', recursive=False):
              if os.path.isdir(file):
                print(f'-- {file}/', flush=True)
          if sys.platform == 'linux':
            print('--------------------------------------------------------------------------------', flush=True)
            for file in glob.glob('/usr/share/nsis/**', recursive=True):
              if os.path.isfile(file):
                print(f'-- {file}', flush=True)
          print('--------------------------------------------------------------------------------', flush=True)

      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Install NSIS plugin
        id: install
        uses: ./    # use ./action.yml

      - name: Verify
        env:
          GITHUB_TOKEN: ${{secrets.PUBLIC_ACCESS}}  # "github-public-read" token
        shell: python
        run: |
          import glob, os, sys
          sys.path.insert(0, r'${{github.workspace}}')
          from action import *

          for makensis, instdir in nsis_list():
            arch = pe_architecture(makensis) if os.name == 'nt' else 'amd64'
            print(f'Found "{makensis}", "{instdir}", ver:{nsis_version(makensis)}, arch:{arch}')
            print('--------------------------------------------------------------------------------', flush=True)
            os.system(f'"{makensis}" -VERSION')
            print('', flush=True)
            print('--------------------------------------------------------------------------------', flush=True)
            for file in glob.glob(os.path.join(instdir, '**'), recursive=True):
              if os.path.isfile(file):
                version = pe_version(file) if file.lower().endswith('.exe') or file.lower().endswith('.dll') else None
                print(f'{file}{"[" + version + "]" if version is not None else ""}', flush=True)
            print('--------------------------------------------------------------------------------', flush=True)

          print(rf'dummy = "${{steps.install.outputs.dummy}}"', flush=True)

  # --------------------------------------------------------------------------------

  advanced-tests:
    name: Advanced Tests
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest, ubuntu-latest, macos-latest]

    runs-on: ${{matrix.os}}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Install NSIS plugins (overwrite newer)
        env:
          GITHUB_TOKEN: ${{secrets.PUBLIC_ACCESS}}  # "github-public-read" token
        shell: python
        run: |
          import glob, os, sys
          sys.path.insert(0, os.path.join(r'${{github.workspace}}', '.github', 'workflows'))
          import test

          print('Preparing temporary NSIS installations...')
          test.test_nsis_list()

          copied = 0
          copied += test.test_github_plugins(overwrite_newer=True, expect_zero_copies=False)
          copied += test.test_web_plugins(overwrite_newer=True, expect_zero_copies=False)

          test.print_line('=')
          print(f'Copied {copied} files')
          test.print_line('=')
          assert copied > 0, 'No files were copied in the first round, something is wrong!'

      - name: Install NSIS plugins (no overwrite)
        shell: python
        run: |
          import glob, os, sys
          sys.path.insert(0, os.path.join(r'${{github.workspace}}', '.github', 'workflows'))
          import test

          copied = 0
          copied += test.test_github_plugins(overwrite_newer=False, expect_zero_copies=True)
          copied += test.test_web_plugins(overwrite_newer=False, expect_zero_copies=True)

          test.print_line('=')
          print(f'Copied {copied} files')
          test.print_line('=')
          assert copied == 0, f'{copied} files were copied in the second round, something is wrong!'
