name: Install NSIS plugin
description: Install NSIS plugin in GitHub runners

inputs:

  # NSIS plugin hosted on GitHub
  github-owner:
    required: false
    description: GitHub owner (user or organization) of the repository containing the NSIS plugin (e.g. "negrutiu")
  github-repo:
    required: false
    description: GitHub repository name containing the NSIS plugin (e.g. "nsis-nscurl")
  github-tag:
    required: false
    description: Git tag, branch or commit (default "latest")
  github-asset-regex:
    required: false
    description: Regular expression to match the asset name (e.g. "NScurl\.zip")
  github-token:
    default: ${{github.token}}
    required: false
    description: Custom GitHub token used for authentication when accessing the GitHub API. This is used to avoid running into GitHub rate limits when downloading release assets.
  
  # NSIS plugin hosted on a web server
  url:
    required: false
    description: URL of the NSIS plugin archive (e.g. "https://nsis.sourceforge.io/mediawiki/images/9/97/NsArray.zip")

  # NSIS plugin package details
  plugin-name:
    required: false
    description: |
      Optional name of the NSIS plugin (e.g. "NScurl", "NsArray").
      If not specified, the plugin name is inferred from the file names.
  plugin-x86-ansi-regex:
    required: false
    description: |
      Optional regex to match the x86-ansi plugin DLL file.
      If not provided, the action will try identify the file automatically.
      All regexes are case-insensitive and matched against the relative path in the archive (e.g. "Plugins/x86-unicode/plugin.dll").
  plugin-x86-unicode-regex:
    required: false
    description: |
      Optional regex to match the x86-unicode plugin DLL file.
      If not provided, the action will try identify the file automatically.
  plugin-amd64-unicode-regex:
    required: false
    description: |
      Optional regex to match the amd64-unicode plugin DLL file.
      If not provided, the action will try identify the file automatically.
  plugin-ignore-regex:
    required: false
    description: |
      Optional regex to ignore certain files in the archive (e.g. ".*Debug.*")
      All regexes are case-insensitive and matched against the relative path in the archive (e.g. "Plugins/x86-unicode/plugin.dll").

  # NSIS installation options
  nsis-directory:
    required: false
    description: |
      Optional path to the NSIS installation directory (e.g. "C:\Program Files (x86)\NSIS", "/usr/share/nsis").
      If not provided, the NSIS plugin is installed into all NSIS installations found on the system.

  nsis-overwrite-newer:
    required: false
    default: 'false'
    description: |
      If true, always overwrite existing plugin files.
      If false, overwrite existing plugin files only if the new files are newer.
      The action identifies newer files based on the TimeDateStamp value in the PE file header.
      Default is false.

branding:
  icon: package   # https://feathericons.com
  color: orange
  
runs:
  using: "composite"
  steps:
    - name: Install NSIS plugin
      id: install
      shell: python
      run: |
        import os, subprocess, sys

        repodir = None
        if not repodir:
          repodir = os.getenv('GITHUB_ACTION_PATH', '')
        if not repodir:
          repodir = os.getenv('GITHUB_WORKSPACE', '')
        assert repodir, 'Cannot determine repository directory'
        repodir = os.path.normpath(os.path.abspath(repodir))

        # download and install NSIS plugin
        args = ['sudo'] if sys.platform == 'linux' else []
        args += [sys.executable, '-O', os.path.join(repodir, 'action.py')]

        if param := r'${{inputs.github-owner}}':
          args += [f'--github-owner={param}']
        if param := r'${{inputs.github-repo}}':
          args += [f'--github-repo={param}']
        if param := r'${{inputs.github-tag}}':
          args += [f'--github-tag={param}']
        if param := r'${{inputs.github-asset-regex}}':
          args += [f'--github-asset-regex={param}']
        if param := r'${{inputs.github-token}}':
          args += [f'--github-token={param}']

        if param := r'${{inputs.url}}':
          args += [f'--url={param}']

        if param := r'${{inputs.plugin-name}}':
          args += [f'--plugin-name={param}']
        if param := r'${{inputs.plugin-x86-ansi-regex}}':
          args += [f'--plugin-x86-ansi-regex={param}']
        if param := r'${{inputs.plugin-x86-unicode-regex}}':
          args += [f'--plugin-x86-unicode-regex={param}']
        if param := r'${{inputs.plugin-amd64-unicode-regex}}':
          args += [f'--plugin-amd64-unicode-regex={param}']
        if param := r'${{inputs.plugin-ignore-regex}}':
          args += [f'--plugin-ignore-regex={param}']

        if param := r'${{inputs.nsis-directory}}':
          args += [f'--nsis-directory={param}']
        if (param := r'${{inputs.nsis-overwrite-newer}}') and param.lower() == 'true':
          args += [f'--nsis-overwrite-newer']

        print(f'Running: {args}', flush=True)
        subprocess.check_call(args)

        # outputs
        # with open(os.getenv('GITHUB_OUTPUT'), "a") as f:
        #   f.write(f"dummy=Dummy value\n")
